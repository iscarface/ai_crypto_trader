version: '3.9'

services:
  backend:
    container_name: trader_backend
    build:
      context: .
      dockerfile: backend/Dockerfile
    # command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]
    command: "uvicorn main:app --host 0.0.0.0 --port 8000 --reload"
    # command: "tail -f /dev/null"
    ports:
      - "8000:8000"
    depends_on:
      - db
    environment:
      - BINANCE_API_KEY
      - BINANCE_API_SECRET
      - DATABASE_URL

    volumes:
      - ./backend:/app

  frontend:
    build: ./frontend
    container_name: trader_frontend
    ports:
      - "3000:3000" # Map the React dev server port
    volumes:
      - ./frontend:/app # Mount the local frontend folder to /app in the container
      - /app/node_modules # Prevent overwriting node_modules in the container
    stdin_open: true
    tty: true
    command: "npm start"
    environment:
      - CHOKIDAR_USEPOLLING=true # Ensures file changes are detected on some systems
      - NODE_ENV=development

  db:
    image: postgres:15
    container_name: trader_postgres
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: trading
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql

  proxy:
    image: nginx:latest
    container_name: trader_proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./proxy/conf.d/default.conf.template:/etc/nginx/conf.d/default.conf.template
      - ./proxy/ssl:/etc/nginx/ssl
      - ./frontend/build:/usr/share/nginx/html
    environment:
      - USE_SSL=${USE_SSL}
    entrypoint: >
      /bin/bash -c "
      if [ '${USE_SSL}' = 'True' ]; then
          cat /etc/nginx/conf.d/default.conf.template > /etc/nginx/conf.d/default.conf;
      else
          sed '/ssl_certificate/d' /etc/nginx/conf.d/default.conf.template |
          sed '/ssl_protocols/d' |
          sed '/ssl_ciphers/d' |
          sed '/return 301 https:/d' |
          sed '/listen 443 ssl/d' > /etc/nginx/conf.d/default.conf;
      fi;
      nginx -g 'daemon off;'
      "
    depends_on:
      - backend
      - frontend

  redis:
    image: redis:6.2
    container_name: trader_redis
    restart: always
    ports:
      - "6379:6379"  # Expose Redis port
    volumes:
      - redis_data:/data

  celery:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: trader_celery
    restart: always
    depends_on:
      - backend
      - redis
    command: celery -A celery_worker worker --loglevel=info
    # command: tail -f /dev/null
    environment:
      - BINANCE_API_KEY
      - BINANCE_API_SECRET
      - DATABASE_URL
    
    volumes:
      - ./backend:/app

  celery-beat:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: trader_celery_beat
    command: celery -A celery_worker beat --loglevel=info
    environment:
      - BINANCE_API_KEY
      - BINANCE_API_SECRET
      - DATABASE_URL
    volumes:
      - ./backend:/app
      - celery_beat_schedule:/app/celery-beat-schedule
    depends_on:
      - redis
      - celery





volumes:
  postgres_data:
  redis_data:
  celery_beat_schedule:
